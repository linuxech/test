#Running Multiple Commands

-- Typing Bash commands each time we run them can become repetitve and
	introduces the risk of typos or other errors.
-- We'll often want to involve some logic in our more complex commands. 
-- There are two methods for sacing sets of Bash commands to reuse later. 

- One-liners
	- Many commands presented in one line of text. 
	- Often piped commands or commands separated by semicolons. 
	- Can be very long(and even wrap),but there's no newline until the end. 
	- Often stored in a note for frequest use. 

- Line Continutation in Bash
	- Long commands can be split across multiple lines with line continuation
	  characters. 

	- For example:	
		  ls \
		-lah \
		~

	- Or:
	  mycommand \
	 -u scott \
	 -p secret \
	 -m admin \
	 -a update-all

##Running Multiple Commands

- Bash script
	- Text file that contains a series of commands. 
	- Run with bash myscript.sh
- Executatble bash script
	- Includes a shebang as the first line (#!/usr/bin/env bash)
	- Make executable with chmod +x myscript
	- Run locally with ./myscript ormyscript if in the $PATH

#Running a Bash Script

- Bash scripts run inside of a non-interactive shell. 
- You can change options for the subshell with set or shopt in the script. 
- Scripts hep avoid typos and allow easier shaaring of Bash code. 
 

## Prints text to the standard output
echo ...


example: echo -n "No new line"

##Bash Variables

- Variables allows us to store and retrieve values by name. 
- Bash variables are a special case of parameter expansion.
- Variables are named with alphanumeric characters. 
- Variables name are case-sesitive.
	- Example:mygreeting=Hello

$((...))
# Arithmetic expansion resturns the result of mathematical operations. Older representation: $[...]
((...))
# Arithmetic evaluation performs calculations and changes the value of variables. 
 
##Support Arithmetic Operations	

	Operations			Operator
	Addtion				  +
	Subtraction			  -
	Multiplication			  *
	Division			  /
	Modulo				  %
	Exponentiation			  **

NOTE: BASH ONlY SUPPORT INTERGER CALCULATIONS. 
 
#To do more precise calculations, consider using bc(Basic calculator) or awk

#Random Numbers in Bash
- The $RANDOM variable returns a pseudorandom integer between 0 and 32,767
- Use $RANDOM with modulo to change the range of numbers returned:
	- For numbers 0-9:$(( RANDOM % 10))
	- For numbers 1-10:$((1 + RANDOM % 10))
	- For numbers 0-1:$(( RANDOM % 2))
	- And so on 

